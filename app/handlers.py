from aiogram import F, Router, html
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
import app.polls as polls
import app.keyboards as kb

from database import *

from app.states import *


router = Router()

# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ start
@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(Register.name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! üëã \n"
                         "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–±–æ—Ç—ã –æ —Ç–≤–æ—ë–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ! üíô\n"
                        "\n"
                        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
                        "\n"
                        "  ¬∑ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ –≤—ã—è–≤–ª—è—Ç—å –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è üìä\n"
                        "  ¬∑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –∏—Ö üåà\n"
                        "  ¬∑ –ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ç–æ–º—É, –∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ üßò‚Äç‚ôÇÔ∏è\n"
                        "\n"
                        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞–∂–Ω–æ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ –∏ —Å–≤–æ—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –º–∏—Ä–µ.\n"
                        )
    await message.answer("–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞. –°–∫–∞–∂–∏, –∫–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –ª—É—á—à–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /me –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.message(Command(commands="me"))
async def me_handler(message: Message):
    user = get_user(session, message.from_user.id)
    if user:
        await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                             f"–ò–º—è: {user.name}\n"
                             f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
                             f"–ü–æ–ª: {user.gender}")
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
                             "–í–æ—Ç, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã —è –º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n"
                             "/mood - –¢–µ—Å—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")

# –°—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
@router.message(Command(commands="mood"))
async def mood_handler(message: Message, state: FSMContext):
    await state.set_state(Mood.first)
    await message.answer("1. –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –±–æ–¥—Ä—ã–º –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º?", reply_markup=kb.mood_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—Å—Ç–æ—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
@router.message(Command(commands="graph"))
async def graph_handler(message: Message, state: FSMContext):
    tests = get_tests(session, message.from_user.id)
    name_tests = [name["name"] for name in tests]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å", reply_markup=kb.graph_keyboard(name_tests))
    await state.set_state(GraphSelection.waiting_for_test)

# –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ
@router.message(GraphSelection.waiting_for_test)
async def graph_create_handler(message: Message, state: FSMContext):
    await polls.graph_select.graph_create(message, state, session)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(Register.name)
async def register_name_handler(message: Message, state: FSMContext):
    await polls.register.ask_age(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(Register.age)
async def register_age_handler(message: Message, state: FSMContext):
    await polls.register.ask_gender(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Register.gender)
async def register_gender_handler(message: Message, state: FSMContext):
    await polls.register.complete_registration(message, state, session)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@router.message(Mood.first)
async def mood_first_handler(message: Message, state: State):
    await polls.mood.first_question(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@router.message(Mood.second)
async def mood_second_handler(message: Message, state: State):
    await polls.mood.second_question(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
@router.message(Mood.third)
async def mood_third_handler(message: Message, state: State):
    await polls.mood.third_question(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@router.message(Mood.forth)
async def mood_forth_handler(message: Message, state: State):
    await polls.mood.forth_question(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—è—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@router.message(Mood.fifth)
async def mood_fifth_handler(message: Message, state: State):
    await polls.mood.fifth_question(message, state, session)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def echo_handler(message: Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ /me.")

